// ********RoostGPT********
/*
Test generated by RoostGPT for test gradle-testing using AI Type Open AI and AI Model gpt-4-turbo

ROOST_METHOD_HASH=determinLetter_c52811fc05
ROOST_METHOD_SIG_HASH=determinLetter_c927558175

### Test Scenarios for the `determinLetter` Method

#### Scenario 1: Test with negative grade input
Details:  
  TestName: testNegativeGradeInput
  Description: This test checks if the method throws an IllegalArgumentException when a negative number is passed as a grade.
Execution:
  Arrange: Prepare an integer representing a negative grade, e.g., -1.
  Act: Invoke `determinLetter` with the negative grade.
  Assert: Expect an IllegalArgumentException to be thrown.
Validation: 
  This assertion verifies that the method correctly handles invalid inputs by enforcing that grades must be non-negative. It ensures the method's robustness and data integrity by not allowing unsupported grade values.

#### Scenario 2: Test with zero as grade
Details:  
  TestName: testZeroGrade
  Description: Test to check if the method returns 'F' when the grade is 0.
Execution:
  Arrange: Prepare an integer grade of 0.
  Act: Invoke `determinLetter` with the grade of 0.
  Assert: Check if the result is 'F'.
Validation: 
  This test confirms that the method correctly categorizes the lowest possible non-negative grade as an 'F'. It is essential for ensuring that boundary values are handled correctly.

#### Scenario 3: Test just below passing grade
Details:  
  TestName: testJustBelowPassingGrade
  Description: Test to check if the method returns 'F' for a grade just below the passing mark (59).
Execution:
  Arrange: Prepare an integer grade of 59.
  Act: Invoke `determinLetter` with the grade of 59.
  Assert: Check if the result is 'F'.
Validation: 
  This test ensures that the method correctly identifies grades that are just below the threshold for passing, ensuring accurate grade categorization.

#### Scenario 4: Test lowest 'D' grade
Details:  
  TestName: testLowestDGrade
  Description: Test to check if the method returns 'D' for a grade of 60.
Execution:
  Arrange: Prepare an integer grade of 60.
  Act: Invoke `determinLetter` with the grade of 60.
  Assert: Check if the result is 'D'.
Validation: 
  This test confirms that the method correctly categorizes the lowest 'D' grade. It checks the accuracy of boundary conditions within the grading logic.

#### Scenario 5: Test just below 'C' grade
Details:  
  TestName: testJustBelowCGrade
  Description: Test to check if the method returns 'D' for a grade of 79.
Execution:
  Arrange: Prepare an integer grade of 79.
  Act: Invoke `determinLetter` with the grade of 79.
  Assert: Check if the result is 'D'.
Validation: 
  The test ensures that the method can accurately identify the upper limit of a 'D' grade, which is crucial for precise grade determination.

#### Scenario 6: Test lowest 'C' grade
Details:  
  TestName: testLowestCGrade
  Description: Test to check if the method returns 'C' for a grade of 80.
Execution:
  Arrange: Prepare an integer grade of 80.
  Act: Invoke `determinLetter` with the grade of 80.
  Assert: Check if the result is 'C'.
Validation: 
  This test checks the method's ability to accurately categorize the lowest 'C' grade, ensuring the grading system's consistency and correctness at boundary values.

#### Scenario 7: Test high grade
Details:  
  TestName: testHighGrade
  Description: Test to check if the method returns 'O' for a high grade (above any defined categories).
Execution:
  Arrange: Prepare an integer grade of 100.
  Act: Invoke `determinLetter` with the grade of 100.
  Assert: Check if the result is 'O'.
Validation: 
  This test ensures that the method correctly handles grades that exceed the defined upper limits of typical grade categories, assigning them an 'O' to signify outstanding performance. This is vital for recognizing exceptional achievements.
*/

// ********RoostGPT********
package com.tomgregory;
import org.junit.Test;
import static org.junit.Assert.*;

public class GradleNewDeterminLetterTest {
    
    @Test(expected = IllegalArgumentException.class)
    public void testNegativeGradeInput() {
        determinLetter(-1);
    }
    @Test
    public void testZeroGrade() {
        assertEquals('F', determinLetter(0));
    }
    @Test
    public void testJustBelowPassingGrade() {
        assertEquals('F', determinLetter(59));
    }
    @Test
    public void testLowestDGrade() {
        assertEquals('D', determinLetter(60));
    }
    @Test
    public void testJustBelowCGrade() {
        assertEquals('D', determinLetter(79));
    }
    @Test
    public void testLowestCGrade() {
        assertEquals('C', determinLetter(80));
    }
    @Test
    public void testHighGrade() {
        assertEquals('O', determinLetter(100));
    }
    // Method under test
    public char determinLetter(int numGrade) {
        if (numGrade < 0) {
            throw new IllegalArgumentException("Number must be greater than 0");
        } else if (numGrade < 60) {
            return 'F';
        } else if (numGrade < 69) {
            return 'D';
        } else if (numGrade < 80) {
            return 'C';
        } else if (numGrade < 60) {
            return 'F';
        }
        return 'O';
    }
}