// ********RoostGPT********
/*
Test generated by RoostGPT for test gradle-testing using AI Type Open AI and AI Model gpt-4-turbo

ROOST_METHOD_HASH=determinLetter_c52811fc05
ROOST_METHOD_SIG_HASH=determinLetter_c927558175

### Test Scenarios for the `determinLetter` Method

#### Scenario 1: Test with negative number grade
Details:  
  TestName: testWithNegativeNumberGrade  
  Description: Tests if the method throws IllegalArgumentException when provided with a negative number grade.  
Execution:  
  Arrange: None required.  
  Act: Invoke `determinLetter` with a negative number (e.g., -1).  
  Assert: Expect an IllegalArgumentException to be thrown.  
Validation:  
  This test validates that the method correctly handles invalid input (negative numbers) by enforcing the precondition that grades must be non-negative. It is significant as it prevents the method from processing illogical grade values, maintaining data integrity.

#### Scenario 2: Test with zero as number grade
Details:  
  TestName: testWithZeroNumberGrade  
  Description: Checks if the method returns 'F' when the grade is 0, which is the boundary case for failing grades.  
Execution:  
  Arrange: None required.  
  Act: Invoke `determinLetter` with 0.  
  Assert: Assert that the result is 'F'.  
Validation:  
  This test ensures that the method correctly categorizes the lowest possible non-negative grade as a failing grade ('F'). It is important for accurately reflecting academic standards where zero typically represents failure.

#### Scenario 3: Test just below passing grade
Details:  
  TestName: testJustBelowPassingGrade  
  Description: Verifies that the method returns 'F' for grades just below the passing threshold (59).  
Execution:  
  Arrange: None required.  
  Act: Invoke `determinLetter` with 59.  
  Assert: Assert that the result is 'F'.  
Validation:  
  This test checks the methodâ€™s accuracy at the boundary condition between failing ('F') and the next higher grade. Ensuring correct behavior at boundary conditions is crucial for maintaining grading consistency.

#### Scenario 4: Test with minimum passing grade
Details:  
  TestName: testWithMinimumPassingGrade  
  Description: Ensures that the method returns 'D' for the lowest passing grade (60).  
Execution:  
  Arrange: None required.  
  Act: Invoke `determinLetter` with 60.  
  Assert: Assert that the result is 'D'.  
Validation:  
  This scenario validates that the method appropriately assigns a 'D' grade to borderline passing scores, crucial for distinguishing between failing and barely passing students.

#### Scenario 5: Test with high passing grade
Details:  
  TestName: testWithHighPassingGrade  
  Description: Ensures that the method returns 'O' for grades above all defined thresholds (e.g., 90).  
Execution:  
  Arrange: None required.  
  Act: Invoke `determinLetter` with 90.  
  Assert: Assert that the result is 'O'.  
Validation:  
  This test checks if the method correctly assigns an 'O' for outstanding performance, where no specific upper grade boundaries are defined. It is important to recognize exceptional achievement appropriately.

#### Scenario 6: Test with exact boundary between D and C
Details:  
  TestName: testWithExactBoundaryBetweenDAndC  
  Description: Tests if the method returns 'C' when the grade is exactly 69.  
Execution:  
  Arrange: None required.  
  Act: Invoke `determinLetter` with 69.  
  Assert: Assert that the result is 'C'.  
Validation:  
  This test ensures that the method accurately handles exact boundary values, crucial for precise grade categorization. It helps maintain grading accuracy and fairness.
*/

// ********RoostGPT********
package com.tomgregory;
import org.junit.Test;
import static org.junit.Assert.*;

public class GradleNewDeterminLetterTest {
    @Test(expected = IllegalArgumentException.class)
    public void testWithNegativeNumberGrade() {
        determinLetter(-1);
    }
    @Test
    public void testWithZeroNumberGrade() {
        assertEquals('F', determinLetter(0));
    }
    @Test
    public void testJustBelowPassingGrade() {
        assertEquals('F', determinLetter(59));
    }
    @Test
    public void testWithMinimumPassingGrade() {
        assertEquals('D', determinLetter(60));
    }
    @Test
    public void testWithExactBoundaryBetweenDAndC() {
        assertEquals('C', determinLetter(69));
    }
    @Test
    public void testWithHighPassingGrade() {
        assertEquals('O', determinLetter(90));
    }
    private char determinLetter(int numGrade) {
        if (numGrade < 0) {
            throw new IllegalArgumentException("Number must be greater than 0");
        } else if (numGrade < 60) {
            return 'F';
        } else if (numGrade < 69) {
            return 'D';
        } else if (numGrade < 80) {
            return 'C';
        } else if (numGrade < 60) {
            return 'F';
        }
        return 'O';
    }
}